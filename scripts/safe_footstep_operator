#!/usr/bin/env python
# from __future__ import print_function

import sys
import os
import rospy
import rospkg
import json
import time
import numpy as np
from safe_footstep_planner.srv import *
from safe_footstep_planner.msg import TargetFoothold
from std_srvs.srv import Empty
from geometry_msgs.msg import Point

import random # for test to set label randomly

class safe_footstep_operator:

  def __init__(self):
    self.sub_target_foothold = rospy.Subscriber("/footstep_planner/target_foothold", TargetFoothold, self.targetFootholdCallback)
    self.target_foothold = None
    print ('safe footstep operator initialized')

  def getDatabase(self):
    rospack = rospkg.RosPack()
    path = os.path.join(rospack.get_path('safe_footstep_planner'), 'config/database.json')
    fr = open(path, 'r')
    database = json.load(fr)
    # database = dict([(0,0), (1, 1), (2, 2), (3, 20), (4,10)])
    return database

  def saveDatabase(self, database):
    rospack = rospkg.RosPack()
    path = os.path.join(rospack.get_path('safe_footstep_planner'), 'config/database.json')
    fw = open(path, 'w')
    json.dump(database, fw)

  def checkFootholdClient(self, target_point, leg):
    rospy.wait_for_service('check_foothold')
    try:
      check_foothold = rospy.ServiceProxy('check_foothold', CheckFoothold)
      res = check_foothold(target_point, leg)
      return res.stiffness
    except rospy.ServiceException, e:
      print "[check foothold] Service call failed: %s"%e

  # def targetFootholdServer(self, req):
  #   try:
  #     self.req = req
  #   except rospy.ServiceException, e:
  #     print "[target foothold] Service call failed: %s"%e
  #   return Empty()

  def targetFootholdCallback(self, data):
    self.target_foothold = data
    if self.target_foothold.leg == 1:
      self.leg = 'Left'
    else:
      self.leg = 'Right'

  def executeCheckFoothold(self):
    label = str(self.target_foothold.label)
    leg = self.target_foothold.leg

    # for test without TargetFoothold
    # msg = Point()
    # msg.x = 0.25
    # msg.y = 0.00
    # msg.z = 0.07
    # label = str(random.randrange(4, 256))

    # modify target
    if (self.target_foothold.target.x < 0.0):
      self.target_foothold.target.x = 0.0
    if (self.target_foothold.target.x > 0.35):
      self.target_foothold.target.x = 0.35
    if (self.target_foothold.target.y < -0.05):
      self.target_foothold.target.y = -0.05
    if (self.target_foothold.target.y > 0.05):
      self.target_foothold.target.y = 0.05
    if (self.target_foothold.target.z < 0.0):
      self.target_foothold.target.z = 0.0
    if (self.target_foothold.target.z > 0.10):
      self.target_foothold.target.z = 0.10

    # wait for operator input
    # print('Leg : %d' %self.target_foothold.leg)
    print('Leg : %s' %self.leg)
    print('Target Foothold : (%s %s %s)' %(self.target_foothold.target.x, self.target_foothold.target.y, self.target_foothold.target.z))
    # print('Press "y" to start foothold check.')
    # start = raw_input('>>> ')
    # if (start == 'y'):
    print('Foothold Checking...')
    k = self.checkFootholdClient(self.target_foothold.target, self.target_foothold.leg)
    # force_z = self.checkFootholdClient(msg)
    # else:
    #   print('Foothold check Canceled.')

    # set cost
    # print('force_z : ' + str(force_z))
    # force_offset = 50 # should be modified
    # force_threshold = 50 # should be modified
    # if (abs(force_z) > force_threshold):
    #   cost = 3
    # else:
    #   cost = 10

    k_offset = 1.2e5
    w = 1.5
    cost = max(0, int(round(-w * np.log(k/k_offset))))

    # add data to database
    database = self.getDatabase()
    data = {label: cost}
    print("label: %s  cost: %d" %(label, cost))
    database.update(data)
    self.saveDatabase(database)
    print('Database Updated')

  def startOperation(self):
    # print('Press "y" to start foothold check.')
    # start = raw_input('>>> ')
    # if (start == 'y'):
    while (True):
      if (self.target_foothold):
        print('Press "s" to show target foothold.')
        print('Press "e" to execute check foothold.')
        print('Press "f" to finish operation.')
        key = raw_input('>>> ')
        if (key == 's'):
          # print('Leg : %d' %self.target_foothold.leg)
          print('Leg : %s' %self.leg)
          print('Target Foothold : (%s %s %s)' %(self.target_foothold.target.x, self.target_foothold.target.y, self.target_foothold.target.z))
        elif (key == 'e'):
          self.executeCheckFoothold()
        elif (key == 'f'):
          break
      else:
        print('Operation node has not received target foothold topic')
        time.sleep(1)
    # else:
    #   print('Operation finished.')

def main(args):
  rospy.init_node('safe_footstep_operator', anonymous=True)
  operator = safe_footstep_operator()
  try:
    # s = rospy.Service('target_foothold', GetTargetFoothold, operator.targetFootholdServer)
    operator.startOperation()
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down")

if __name__ == '__main__':
    main(sys.argv)
